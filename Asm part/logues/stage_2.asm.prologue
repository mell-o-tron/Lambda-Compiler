; NOTE
; We use three stacks:
;  - the builtin stack
;  - the operand stack
;  - the environment stack
;
; There is only one environment because we use dynamic scoping, for simplicity.
;
; Here is a sketch of the memory map:
;
; 0x0      ...   0x4FF		unusable in real mode
; 0x500    ...   0x7DFF		memory we can use for the stacks (including overwriting bootsector)
; 0x7e00   ...   0x7FFFF	second stage bootloader
;
; We divide the stack memory in three parts, each of length 0x2855
;   - [0x500,  0x2D54]
; 	- [0x2D55, 0x55A9]
;	- [0x55AA, 0x7DFF]

[org 0x7e00]
[bits 16]


%define CURRENT_RECORD ecx
%define OPERAND_POINTER esi
%define AR_AREA_POINTER edx

%define CURRENT_RECORD_BUF  0x500
%define OPERAND_POINTER_BUF 0x502
%define AR_AREA_POINTER_BUF 0x504
%define INT_RESULT			0x506
%define CURRENT_END			0x516
%define TEMPLATE_RESULT		0x518

%macro 	push_operand 1
		mov edi, %1
		mov [OPERAND_POINTER], edi
		add OPERAND_POINTER, 2
%endmacro

%macro 	pop_operand 1
		sub OPERAND_POINTER, 2
		mov %1, [OPERAND_POINTER]
%endmacro

%macro swizzle 0			; 1 2 3 -> 3 1 2
		push eax
		push ebx
		
		; modo A, che non funziona
		; mov word ax, [OPERAND_POINTER + 2]
		; mov word bx, [OPERAND_POINTER + 4]
		; mov word [OPERAND_POINTER + 2], bx
		; mov word bx, [OPERAND_POINTER + 6]
		; mov word [OPERAND_POINTER + 4], bx
		; mov word [OPERAND_POINTER + 2], ax

		; modo B
		
		pop_operand eax	   ; 1 2   A = X3   []
		pop_operand ebx    ; 1	   B = X2   []
		push ebx		   ; 1     B = X2   [X2]
		pop_operand ebx    ; -	   B' = X1  [X2]
 
		push_operand eax   ; 3	   
		push_operand ebx   ; 3 1
		pop ebx
		push_operand ebx   ; 3 1 2

		; Tra A e B, il modo migliore Ã¨ B <- ChatGPT, la nostra 8-ball
		; il motivo per cui b Ã¨ migliore Ã¨ che non c'Ã¨ bisogno di fare movimenti di memoria
		; e quindi Ã¨ piÃ¹ veloce <- ChatGPT, la nostra 8-ball, va be' questo Ã¨ falso, ma Ã¨ piÃ¹ facile da leggere
		
		pop ebx
		pop eax
%endmacro

%macro dup_2operand 0			; X1 X2
		push eax
		push ebx

		pop_operand eax			; A = X2
		pop_operand ebx			; B = X1
		
		push_operand ebx		; X1
		push_operand eax		; X1 X2
		
		push_operand ebx		; X1 X2 X1
		push_operand eax		; X1 X2 X1 X2

		pop ebx
		pop eax
%endmacro

%macro add_integers 0
add ax, bx
push_operand eax
%endmacro

%macro mul_integers 0
push edx
push ecx
cwd
imul bx
pop ecx
pop edx
push_operand eax
%endmacro

%macro div_integers 0

push edx
push ecx
mov edx, 0
cwd
idiv bx
pop ecx
pop edx

push_operand eax
%endmacro


%macro 	make_record 0
		push eax
		xor eax, eax
		add AR_AREA_POINTER, 8
		mov [AR_AREA_POINTER + 6], word 0			; non-function check
		pop_operand ax								; argument
		mov [AR_AREA_POINTER + 4], ax				; save parameter
		pop_operand ax								; environment (definition record)
		mov [AR_AREA_POINTER + 2], ax				; save definition record
		mov eax, CURRENT_RECORD
		mov [AR_AREA_POINTER], ax					; save caller record

		pop_operand bx								; function


		mov CURRENT_RECORD, AR_AREA_POINTER

		; print_cur_record
		pop eax
%endmacro

%macro 	make_HO_record 0
		push eax
		xor eax, eax
		add AR_AREA_POINTER, 8

		pop_operand ax								; par_def_record
		mov [AR_AREA_POINTER + 6], ax
		pop_operand ax								; argument
		mov [AR_AREA_POINTER + 4], ax				; save parameter
		pop_operand ax								; environment (definition record)
		mov [AR_AREA_POINTER + 2], ax				; save definition record

		mov eax, CURRENT_RECORD

		mov [AR_AREA_POINTER], ax					; save caller record

		pop_operand bx								; function

		mov CURRENT_RECORD, AR_AREA_POINTER

		; print_cur_record
		pop eax
%endmacro

%macro 	make_funky_record 0 ;ðŸ•º
		push eax
		xor eax, eax
		add AR_AREA_POINTER, 8

		pop_operand ax								; par_def_record
		mov [AR_AREA_POINTER + 6], ax
		pop_operand ax								; argument
		mov [AR_AREA_POINTER + 4], ax				; save parameter
		pop_operand ax								; throw away the definition record lol

		mov eax, CURRENT_RECORD
		mov [AR_AREA_POINTER + 2], ax				; definition record is current record

		mov [AR_AREA_POINTER], ax					; save caller record

		pop_operand bx								; function

		mov CURRENT_RECORD, AR_AREA_POINTER

; 		print_cur_record
		pop eax
%endmacro

%macro print_cur_record 0
	pusha
	mov ebx, CURRENT_RECORD
	call print_dec
	popa

	pusha
	mov bx, REC_STRING
	call print_string
	popa

	pusha
	mov bx, [CURRENT_RECORD]
	call print_dec
	popa

	pusha
	mov bx, [CURRENT_RECORD + 2]
	call print_dec
	popa

	pusha
	mov bx, [CURRENT_RECORD + 4]
	call print_dec
	popa

	pusha
	mov bx, [CURRENT_RECORD + 6]
	call print_dec
	popa

	pusha
	mov bx, NEW_LINE
	call print_string
	popa
%endmacro

%macro print_stack 0

	pusha
	mov bx, [OPERAND_POINTER - 2]
	call print_dec
	popa

	pusha
	mov bx, [OPERAND_POINTER - 4]
	call print_dec
	popa

	pusha
	mov bx, [OPERAND_POINTER - 6]
	call print_dec
	popa

	pusha
	mov bx, [OPERAND_POINTER - 8]
	call print_dec
	popa

	pusha
	mov bx, [OPERAND_POINTER - 10]
	call print_dec
	popa

	pusha
	mov bx, [OPERAND_POINTER - 12]
	call print_dec
	popa

	pusha
	mov bx, [OPERAND_POINTER - 14]
	call print_dec
	popa

	pusha
	mov bx, [OPERAND_POINTER - 16]
	call print_dec
	popa

	pusha
	mov bx, [OPERAND_POINTER - 18]
	call print_dec
	popa

	pusha
	mov bx, [OPERAND_POINTER - 20]
	call print_dec
	popa

	pusha
	mov bx, [OPERAND_POINTER - 22]
	call print_dec
	popa

	pusha
	mov bx, [OPERAND_POINTER - 24]
	call print_dec
	popa

	pusha
	mov bx, NEW_LINE
	call print_string
	popa
%endmacro


%macro 	say_here 0
	pusha
	mov bx, HERE_STRING
	pusha						; TODO: Why the double pusha?
	call near print_string
	popa
	popa
%endmacro

%macro print_fun_pointer 1
	pusha
	mov bx, fun_%1
	call print_dec
	popa
%endmacro

%macro nl 0
	pusha
	mov bx, NEW_LINE
	call print_string
	popa
%endmacro

%macro call_debug_info 0
	pusha
	mov bx, FUN_STRING
	call print_string
	popa

	pusha
	mov bx, $
	sub bx, 9
	call print_dec
	popa

	pusha
	mov bx, NEW_LINE
	call print_string
	popa

	pusha
	mov bx, PAR_STRING
	call print_string
	popa

	mov ax, 0
	call printle
	mov ax, 1
	call printle
	mov ax, 2
	call printle

	pusha
	mov bx, NEW_LINE
	call print_string
	popa
%endmacro

%macro bufferize 0
	push eax
	xor eax, eax
	mov ax, word [CURRENT_RECORD]
	mov [CURRENT_RECORD_BUF], ax
	mov eax, OPERAND_POINTER
	mov [OPERAND_POINTER_BUF], ax
	mov eax, AR_AREA_POINTER
	mov [AR_AREA_POINTER_BUF], ax
	pop eax
%endmacro

%macro debufferize 0
	push eax
	xor eax, eax
	mov ax, [AR_AREA_POINTER_BUF]
	mov AR_AREA_POINTER, eax
	mov ax, [CURRENT_RECORD_BUF]
	mov CURRENT_RECORD, eax
	mov ax, [OPERAND_POINTER_BUF]
	mov OPERAND_POINTER, eax
	pop eax
%endmacro

%macro call_interrupt 1
	pop_operand ax
	shl ax, 8
	or ax, 0xcd
	mov [should_call_here_%1], ax

	pop_operand al
	pop_operand ah
	pop_operand bl
	pop_operand bh
	pop_operand cl
	pop_operand ch
	pop_operand dl
	pop_operand dh

	should_call_here_%1:
	dw 0

	mov [INT_RESULT], al
	mov [INT_RESULT + 2], ah
	mov [INT_RESULT + 4], bl
	mov [INT_RESULT + 6], bh
	mov [INT_RESULT + 8], cl
	mov [INT_RESULT + 10], ch
	mov [INT_RESULT + 12], dl
	mov [INT_RESULT + 14], dh
%endmacro


%macro call_callback 0
	call template_create_tuple
	push_operand CURRENT_RECORD

	make_funky_record

	;
	; pusha
	; print_cur_record
	; popa

	call bx
	debufferize
%endmacro

%macro create_bigint 0
	call template_create_bigint
	push_operand CURRENT_RECORD
%endmacro

cli
mov ax, 0x00
mov ds, ax
mov es, ax
mov ss, ax
mov sp, 0x2D55		; stack pointer
sti

; setup stacks, TODO rescale these (also have [0x500,  0x2D50])

mov AR_AREA_POINTER, 0x2D55
mov OPERAND_POINTER, 0x55AA

; TEMP: write magic numbers before start of operand stack as canary
mov word [OPERAND_POINTER - 2], 0x0008
mov word [OPERAND_POINTER - 4], 0x0008
mov word [OPERAND_POINTER - 6], 0x0008
mov word [OPERAND_POINTER - 8], 0x0008
mov word [OPERAND_POINTER - 10], 0x0008
mov word [OPERAND_POINTER - 12], 0x0008
mov word [OPERAND_POINTER - 14], 0x0008
mov word [OPERAND_POINTER - 16], 0x0008

mov CURRENT_RECORD, AR_AREA_POINTER
bufferize
mov word [CURRENT_END], start_of_end

mov bx, STAGING
call print_string



; push_env print_number

; GENERATED CODE WILL BE WRITTEN HERE
