; NOTE
; We use three stacks:
;  - the builtin stack
;  - the operand stack
;  - the environment stack
;
; There is only one environment because we use dynamic scoping, for simplicity.
; 
; Here is a sketch of the memory map:
; 
; 0x0      ...   0x4FF		unusable in real mode
; 0x500    ...   0x7DFF		memory we can use for the stacks (including overwriting bootsector)
; 0x7e00   ...   0x7FFFF	second stage bootloader
;
; We divide the stack memory in three parts, each of length 0x2855
;   - [0x500,  0x2D54]
; 	- [0x2D55, 0x55A9]
;	- [0x55AA, 0x7DFF]

[org 0x7e00]
[bits 16]


%define CURRENT_RECORD ecx
%define OPERAND_POINTER edx
%define AR_AREA_POINTER esi

%define CURRENT_DEPTH 0x500

%macro 	push_operand 1
		mov edi, %1
		mov [OPERAND_POINTER], edi
		add OPERAND_POINTER, 2
%endmacro


%macro 	pop_operand 1
		sub OPERAND_POINTER, 2
		mov %1, [OPERAND_POINTER]
%endmacro

%macro 	make_record 0
		pop_operand ax		; argument
		pop_operand di		; environment (definition record)
		pop_operand bx		; function
		
		add AR_AREA_POINTER, 6
		
		mov [AR_AREA_POINTER], CURRENT_RECORD		; save caller record
		mov [AR_AREA_POINTER + 2], di				; save definition record
		mov [AR_AREA_POINTER + 4], ax				; save parameter
		
		mov CURRENT_RECORD, AR_AREA_POINTER
		inc word [CURRENT_DEPTH]
%endmacro

%macro 	say_here 0
	pusha
	mov bx, HERE_STRING
	call print_string
	popa
%endmacro

	cli
	mov ax, 0x00
	mov ds, ax
	mov es, ax
	mov ss, ax
	mov sp, 0x2D55		; stack pointer
	sti

	; setup stacks, TODO rescale these (also have [0x500,  0x2D50])
	
	mov AR_AREA_POINTER, 0x2D55
	mov OPERAND_POINTER, 0x55AA
	mov CURRENT_RECORD, AR_AREA_POINTER
	
	
	mov word [CURRENT_DEPTH], 6969		; depths are computed at compile time!!

mov bx, STAGING
call print_string

; push_env print_number

; GENERATED CODE WILL BE WRITTEN HERE
