** int -> int     #iter |-> pi
** 1 - 1/3 + 1/5 - 1/7 ......
** ⨉× ᕦ(ò_óˇ)ᕤ
** 1 / 1 + (2×i)
** (((Lx / 2) * 2) = Lx)
**
** def pi(i):
**     if i == 0:
**         return 1
**     else:
**         if i % 2 == 0:
**             return 1/(1+(i*2)) + pi(i-1)
**         else:
**             return -1/(1+(i*2)) + pi(i-1)


** @(($ ($ (Y) 
** 
**     (λ. λ.
**         (if L0 beq bi(0)
**         then
**             bi(10000) 
**         else (   
**                 if ((((L0 ⊘ bi(2)) 😎 bi(2)) beq L0) )
**                 then
**                     (bi(10000) ⊘ ((L0 ⊗ bi(2)) ⊕ bi(1)))
**                 else
**                     (⊖(bi(10000) ⊘ ((L0 ⊗ bi(2)) ⊕ bi(1))))) ⊕ ($ (L1) (L0 ⊕ (bi(-1)))
**             )
**         )
**     ))
**     (bi(1))
** )
**                     
** bigtimes bi(4))(0)


** (@ ($ (Y) 
** 
** (λ. λ. (if L0 = 0 then 10000 
**                     else (
**                         
**                         (if ((((L0 / 2) * 2) = L0) ) then (10000 / ((L0 * 2) + 1))
**                         else (-10000 / ((L0 * 2) + 1))) + (@ (L1) (L0 + (-1)))
**                     )))) (2577)) * 4



**@($(λ.λ.@(L1)(5))(λ.0))(3)

**lambda L1 : lambda L0 : 1 if L0 == 0 else ((1/(1+(L0*2)) + L1(L0-1)) if L0 % 2 == 0 else -1/(1+(L0*2)) + L1(L0-1))


$(($(¥)(λ.λ.
        if L0 beq bi(0)
        then
            bi(1000000) 
        else(
            if (L0 ⊘ bi(2) ⊗ bi(2)) beq L0
            then
                (bi(1000000) ⊘ ((L0 ⊗ bi(2)) ⊕ bi(1))) ⊕ ($ (L1) (L0 ⊕ (bi(-1))))
            else
                (⊖(bi(1000000) ⊘ ((L0 ⊗ bi(2)) ⊕ bi(1)))) ⊕ ($ (L1) (L0 ⊕ (bi(-1))))
        )
    )
))(bi(13)) ⊙ bi(4)



** @($ ($ (¥) (λs. (2) if (L0 b= bi(0)) then bi(0) else bi(2) ⊕ $(L1)(L0 ⊕⊖ bi(1)))) (bi(24)))(0)
